
##################################################################################################
# The purpose of this code is to do the following:
# 1. Calculate the conceptual density of the user stories that were generated by SimpleNLG. These Metrics
# will be used to compare against the conceptual density of the original user storiesself.
# 2. To calculate the semantic similarity between the original user story inputs and their respective SimpleNLG outputs.
# 3. To create a QFD Report (in excel) that summarizes (1), (2) into a readable format for the user. The report will provide
# provide traceability between the inputs and  outputs, identify potential duplicate user stories, and group user stories by key
# elements to give insight to the user into the completeness of the user story set.
##################################################################################################

#for writing to Excel
import openpyxl
from openpyxl import Workbook
#from openpyxl.compat import range
from openpyxl.utils import get_column_letter
import xlsxwriter

#for dataframe operations
import pandas as pd
import numpy as np
import re
import itertools

# for writing / reading from Excel
from xlutils.copy import copy
import xlrd
import xlwt

from collections import Counter

import spacy
nlp = spacy.load('en_core_web_lg')

from itertools import chain
from itertools import combinations

#NLTK tokenizer and POS tagger
import nltk
#nltk.download()
from nltk import word_tokenize, sent_tokenize
from nltk import pos_tag, pos_tag_sents
from nltk.corpus import wordnet
from nltk import RegexpParser
from nltk.stem.wordnet import WordNetLemmatizer

file = 'pairwise_semsim_inputs.xls'
df_semsim = pd.read_excel(file, encoding = 'utf-8')

# #----------------------SemSim- Inputs and Outputs 1:1------------------------#
for index, row in df_semsim.iterrows():
	doca = nlp(df_semsim.loc[index,'Baseline User Story'])
	docb = nlp(df_semsim.loc[index,'Revised User Story'])
	df_semsim.loc[index,'Pairwise SemSim'] = docb.similarity(doca)
	#print(doca.similarity(docb))

print(df_semsim.head(10))

import xlwt
from xlwt import Workbook

writer = pd.ExcelWriter('revised_pairwise_semsim_output.xls', engine='xlwt')
df_semsim.to_excel(writer, 'Revised Pairwise Semsim')

writer.save()
writer.close()

